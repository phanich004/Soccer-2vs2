{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89ae284b-02b8-47ce-b3bc-6a55c5ec35fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Implementation of 2vs2 Soccer Environment with one trained striker\n",
    "import mlagents\n",
    "import mlagents_envs\n",
    "from mlagents_envs.environment import UnityEnvironment\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.distributions import Categorical\n",
    "from mlagents_envs.base_env import ActionTuple\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import deque\n",
    "\n",
    "#Policy Network\n",
    "class PolicyNetwork(nn.Module):\n",
    "    def __init__(self, input_dim=336, hidden_dim=512, output_dim=3):\n",
    "        super(PolicyNetwork, self).__init__()\n",
    "        self.network = nn.Sequential(\n",
    "            nn.Linear(input_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_dim, output_dim)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.network(x)\n",
    "\n",
    "# Value Network\n",
    "class ValueNetwork(nn.Module):\n",
    "    def __init__(self, input_dim=336, hidden_dim=512):\n",
    "        super(ValueNetwork, self).__init__()\n",
    "        self.network = nn.Sequential(\n",
    "            nn.Linear(input_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_dim, 1)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.network(x)\n",
    "\n",
    "#Memory class to store transitions\n",
    "class PPOMemory:\n",
    "    def __init__(self):\n",
    "        self.states = []\n",
    "        self.actions = []\n",
    "        self.rewards = []\n",
    "        self.values = []\n",
    "        self.log_probs = []\n",
    "        self.dones = []\n",
    "    def clear(self):\n",
    "        self.states.clear()\n",
    "        self.actions.clear()\n",
    "        self.rewards.clear()\n",
    "        self.values.clear()\n",
    "        self.log_probs.clear()\n",
    "        self.dones.clear()\n",
    "\n",
    "#PPO Agent\n",
    "class PPOAgent:\n",
    "    def __init__(self, input_dim=336, hidden_dim=512, action_dim=3):\n",
    "        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "        self.policy = PolicyNetwork(input_dim, hidden_dim, action_dim).to(self.device)\n",
    "        self.value = ValueNetwork(input_dim, hidden_dim).to(self.device)\n",
    "        self.memory = PPOMemory()\n",
    "\n",
    "        # Hyperparameters\n",
    "        self.learning_rate = 3e-4\n",
    "        self.gamma = 0.99\n",
    "        self.gae_lambda = 0.95\n",
    "        self.clip_epsilon = 0.2\n",
    "        self.c1 = 0.5  \n",
    "        self.c2 = 0.01  \n",
    "        self.batch_size = 64\n",
    "        self.n_epochs = 10\n",
    "        self.max_grad_norm = 0.5\n",
    "\n",
    "        self.policy_optimizer = optim.Adam(self.policy.parameters(), lr=self.learning_rate)\n",
    "        self.value_optimizer = optim.Adam(self.value.parameters(), lr=self.learning_rate)\n",
    "\n",
    "    def get_action(self, state):\n",
    "        state = torch.FloatTensor(state).to(self.device)\n",
    "        with torch.no_grad():\n",
    "            logits = self.policy(state)\n",
    "            value = self.value(state)\n",
    "            dist = Categorical(logits=logits)\n",
    "            action = dist.sample()\n",
    "            log_prob = dist.log_prob(action)\n",
    "\n",
    "        return action.cpu().numpy(), log_prob.cpu().numpy(), value.cpu().numpy()\n",
    "\n",
    "    def store_transition(self, state, action, reward, value, log_prob, done):\n",
    "        self.memory.states.append(state)\n",
    "        self.memory.actions.append(action)\n",
    "        self.memory.rewards.append(reward)\n",
    "        self.memory.values.append(value)\n",
    "        self.memory.log_probs.append(log_prob)\n",
    "        self.memory.dones.append(done)\n",
    "\n",
    "    def compute_advantages(self):\n",
    "        rewards = torch.tensor(self.memory.rewards, dtype=torch.float32).to(self.device)\n",
    "        values = torch.tensor(self.memory.values, dtype=torch.float32).to(self.device)\n",
    "        dones = torch.tensor(self.memory.dones, dtype=torch.float32).to(self.device)\n",
    "\n",
    "        advantages = torch.zeros_like(rewards).to(self.device)\n",
    "        last_gae = 0\n",
    "\n",
    "        for t in reversed(range(len(rewards))):\n",
    "            if t == len(rewards) - 1:\n",
    "                next_value = 0\n",
    "            else:\n",
    "                next_value = values[t + 1]\n",
    "\n",
    "            delta = rewards[t] + self.gamma * next_value * (1 - dones[t]) - values[t]\n",
    "            last_gae = delta + self.gamma * self.gae_lambda * (1 - dones[t]) * last_gae\n",
    "            advantages[t] = last_gae\n",
    "\n",
    "        returns = advantages + values\n",
    "        return advantages, returns\n",
    "\n",
    "    def update(self):\n",
    "        states = torch.FloatTensor(np.array(self.memory.states)).to(self.device)\n",
    "        actions = torch.LongTensor(self.memory.actions).to(self.device)\n",
    "        old_log_probs = torch.FloatTensor(self.memory.log_probs).to(self.device)\n",
    "\n",
    "        advantages, returns = self.compute_advantages()\n",
    "        advantages = (advantages - advantages.mean()) / (advantages.std() + 1e-8)\n",
    "\n",
    "        for _ in range(self.n_epochs):\n",
    "            for idx in range(0, len(states), self.batch_size):\n",
    "                batch_states = states[idx:idx + self.batch_size]\n",
    "                batch_actions = actions[idx:idx + self.batch_size]\n",
    "                batch_log_probs = old_log_probs[idx:idx + self.batch_size]\n",
    "                batch_advantages = advantages[idx:idx + self.batch_size]\n",
    "                batch_returns = returns[idx:idx + self.batch_size]\n",
    "\n",
    "                # Policy loss\n",
    "                logits = self.policy(batch_states)\n",
    "                dist = Categorical(logits=logits)\n",
    "                new_log_probs = dist.log_prob(batch_actions)\n",
    "                entropy = dist.entropy().mean()\n",
    "\n",
    "                ratio = torch.exp(new_log_probs - batch_log_probs)\n",
    "                surr1 = ratio * batch_advantages\n",
    "                surr2 = torch.clamp(ratio, 1 - self.clip_epsilon, 1 + self.clip_epsilon) * batch_advantages\n",
    "                policy_loss = -torch.min(surr1, surr2).mean()\n",
    "                values = self.value(batch_states).squeeze()\n",
    "                value_loss = 0.5 * ((values - batch_returns) ** 2).mean()\n",
    "                loss = policy_loss + self.c1 * value_loss - self.c2 * entropy\n",
    "                self.policy_optimizer.zero_grad()\n",
    "                self.value_optimizer.zero_grad()\n",
    "                loss.backward()\n",
    "                torch.nn.utils.clip_grad_norm_(self.policy.parameters(), self.max_grad_norm)\n",
    "                torch.nn.utils.clip_grad_norm_(self.value.parameters(), self.max_grad_norm)\n",
    "                self.policy_optimizer.step()\n",
    "                self.value_optimizer.step()\n",
    "        self.memory.clear()\n",
    "\n",
    "def train_single_striker(env, n_episodes=1000, max_steps_per_episode=2000):\n",
    "    striker = PPOAgent()\n",
    "    episode_rewards = []\n",
    "    goals_scored = []\n",
    "    moving_avg_reward = deque(maxlen=100)\n",
    "\n",
    "    for episode in range(n_episodes):\n",
    "        env.reset()\n",
    "        episode_reward = 0\n",
    "        episode_goals = 0\n",
    "        steps = 0\n",
    "        while steps < max_steps_per_episode:\n",
    "            for behavior_name in list(env.behavior_specs.keys()):\n",
    "                decision_steps, terminal_steps = env.get_steps(behavior_name)\n",
    "\n",
    "                if len(decision_steps) == 0:\n",
    "                    continue\n",
    "\n",
    "                n_agents = len(decision_steps)\n",
    "\n",
    "                if \"team=1\" in behavior_name:\n",
    "                    striker_obs = decision_steps.obs[0][0]\n",
    "                    action, log_prob, value = striker.get_action(striker_obs)\n",
    "                    reward = calculate_reward(decision_steps, terminal_steps)\n",
    "                    done = len(terminal_steps) > 0\n",
    "                    striker.store_transition(striker_obs, action, reward, value, log_prob, done)\n",
    "                    episode_reward += reward\n",
    "                    if len(terminal_steps) > 0 and np.any(terminal_steps.reward > 0):\n",
    "                        episode_goals += 1\n",
    "                    striker_action = action.reshape(1, 3) #random actions for other 3 agents\n",
    "                    other_actions = np.random.randint(0, 3, (n_agents-1, 3), dtype=np.int32)\n",
    "                    discrete_actions = np.vstack([striker_action, other_actions])\n",
    "                else:\n",
    "                    discrete_actions = np.random.randint(0, 3, (n_agents, 3), dtype=np.int32)\n",
    "                continuous_actions = np.zeros((n_agents, 0))\n",
    "                action_tuple = ActionTuple(continuous_actions, discrete_actions)\n",
    "                env.set_actions(behavior_name, action_tuple)\n",
    "            env.step()\n",
    "            steps += 1\n",
    "            \n",
    "            if len(striker.memory.states) >= 2048:\n",
    "                striker.update()\n",
    "\n",
    "        episode_rewards.append(episode_reward)\n",
    "        goals_scored.append(episode_goals)\n",
    "        moving_avg_reward.append(episode_reward)\n",
    "\n",
    "        if episode % 10 == 0:\n",
    "            print(f\"Episode {episode}, Reward: {episode_reward:.2f}, Goals: {episode_goals}\")\n",
    "            plot_training_progress(episode_rewards, goals_scored)\n",
    "\n",
    "    return episode_rewards, goals_scored\n",
    "\n",
    "def plot_training_progress(rewards, goals): #Plot the graphs\n",
    "    plt.figure(figsize=(12, 8))\n",
    "    plt.subplot(2, 1, 1)\n",
    "    plt.plot(rewards)\n",
    "    plt.title('Episode Rewards')\n",
    "    plt.xlabel('Episode')\n",
    "    plt.ylabel('Reward')\n",
    "\n",
    "    plt.subplot(2, 1, 2)\n",
    "    plt.plot(goals)\n",
    "    plt.title('Goals Scored per Episode')\n",
    "    plt.xlabel('Episode')\n",
    "    plt.ylabel('Goals')\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    #initialize the Unity environment, need to modify with environment path in pc\n",
    "    env = UnityEnvironment(file_name=\"/Users/phani/Desktop/DRL Project/ml-agents/training-envs-executables/SoccerTwos/SoccerTwos.app\") #path in my pc\n",
    "    try:\n",
    "        \n",
    "        rewards, goals = train_single_striker(env)\n",
    "    finally:\n",
    "        # closing environment\n",
    "        env.close()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
